//
//  Response.swift
//  SwiftyBot
//
//  The MIT License (MIT)
//
//  Copyright (c) 2016 - 2018 Fabrizio Brancati.
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.

import BFKit
import Foundation
import Helpers
import Vapor

/// Messenger response.
public struct Response: Content {
    /// Message type.
    public enum MessagingType: String, Codable {
        /// Resposne type.
        case response = "RESPONSE"
    }
    
    /// Messaging type.
    private(set) public var messagingType: MessagingType
    /// Recipient.
    public var recipient: Recipient?
    /// Final response message.
    public var message: MessageResponse
    
    /// Coding keys, used by Codable protocol.
    private enum CodingKeys: String, CodingKey {
        case messagingType = "messaging_type"
        case recipient
        case message
    }
    
    /// Create a response for a request.
    ///
    /// - Parameter httpRequest: Message request.
    /// - Returns: Returns the message `HTTPResponse`.
    /// - Throws: Decoding errors.
    public func response(_ httpRequest: Request) throws -> HTTPResponse {
        /// Check that the request comes from a "page".
        let pageResponse = try httpRequest.content.syncDecode(PageRequest.self)
        
        guard pageResponse.object == "page" else {
            /// Throw an abort response, with a custom message.
            throw Abort(.badRequest, reason: "Message not generated by a page.")
        }
        
        var response = Messenger.Response(messagingType: .response, recipient: nil, message: .text("Unknown error."))
        
        for entry in pageResponse.entries {
            for event in entry.messages {
                if let postback = event.postback {
                    response.message = .text(postback.payload ?? "No payload provided by developer.")
                } else if let message = event.message {
                    if message.text.isEmpty {
                        response.message = .text("I'm sorry but your message is empty ðŸ˜¢")
                    } else if message.text.hasGreetings() {
                        response.message = .text("""
                        Hi!
                        This is an example on how to create a bot with Swift.
                        If you want to see more try to send me "buy", "sell" or "shop".
                        """)
                    } else if message.text.lowercased().contains("sell") || message.text.lowercased().contains("buy") || message.text.lowercased().contains("shop") {
                        let queuer = Element(exampleTitle: "Queuer", subtitle: "Queuer is a queue manager, built on top of OperationQueue and Dispatch (aka GCD).", itemURL: "https://github.com/FabrizioBrancati/Queuer", imageURL: "https://github.fabriziobrancati.com/queuer/resources/queuer-banner.png")
                        
                        let bfkitSwift = Element(exampleTitle: "BFKit-Swift", subtitle: "BFKit-Swift is a collection of useful classes, structs and extensions to develop Apps faster.", itemURL: "https://github.com/FabrizioBrancati/BFKit-Swift", imageURL: "https://github.fabriziobrancati.com/bfkit/resources/banner-swift-new.png")
                        
                        let bfkit = Element(exampleTitle: "BFKit-Swift", subtitle: "BFKit is a collection of useful classes and categories to develop Apps faster.", itemURL: "https://github.com/FabrizioBrancati/BFKit", imageURL: "https://github.fabriziobrancati.com/bfkit/resources/banner-objc.png")
                        
                        let swiftyBot = Element(exampleTitle: "BFKit-Swift", subtitle: "How to create a Telegram & Messenger bot with Swift using Vapor on Ubuntu / macOS", itemURL: "https://github.com/FabrizioBrancati/BFKit", imageURL: "https://github.fabriziobrancati.com/swiftybot/resources/swiftybot-banner-new.png")
                        
                        /// Create the elements array and add all the created elements.
                        var elements: [Element] = []
                        /// Add Queuer element.
                        elements.append(queuer)
                        /// Add BFKit-Swift element.
                        elements.append(bfkitSwift)
                        /// Add BFKit element.
                        elements.append(bfkit)
                        /// Add SwiftyBot element.
                        elements.append(swiftyBot)
                        
                        let payload = Payload(templateType: .generic, elements: elements)
                        let attachment = Attachment(type: .template, payload: payload)
                        let structuredMessage = StructuredMessage(attachment: attachment)
                        
                        response.message = .structured(structuredMessage)
                    } else {
                        response.message = .text(message.text.reversed(preserveFormat: true))
                    }
                } else if event.message == nil {
                    response.message = .text("Webhook received unknown event.")
                }
                
                response.recipient = Recipient(id: event.sender.id)
                
                _ = try httpRequest.client().post("https://graph.facebook.com/v3.0/me/messages?access_token=\(messengerToken)", headers: ["Content-Type": "application/json"]) { messageRequest in
                    try messageRequest.content.encode(response)
                }
            }
        }
        
        /// Sending an HTTP 200 OK response is required.
        /// https://developers.facebook.com/docs/messenger-platform/webhook-reference#response
        return HTTPResponse(status: .ok, headers: ["Content-Type": "application/json"])
    }
}

// MARK: - Response Extension

/// Response extension.
public extension Response {
    /// Empty init method.
    /// Declared in an extension to not override default `init` function.
    public init() {
        messagingType = .response
        recipient = nil
        message = .text("")
    }
}
